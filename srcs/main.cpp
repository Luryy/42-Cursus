#include <WebServ.hpp>
#include <Utils.hpp>

#include <iostream>
#include <ctime>



#include <fstream>
#include <vector>
#include <dirent.h>

using namespace std;



time_t TS;

WebServ web_serv;


void createhmtl(void){

	remove(AutoIndexHTML);


	 // The directory that we want to generate an autoindex for
    string directory = "root_html";

    // Open the directory using the opendir function
    DIR* dir = opendir(directory.c_str());
    if (!dir) {
        cerr << "Error: could not open directory " << directory << endl;
    }

    

    // Create the HTML for the autoindex
	createAutoIndex(AutoIndexHTML,"<!DOCTYPE html>\n");
	createAutoIndex(AutoIndexHTML,"<html>\n");
	createAutoIndex(AutoIndexHTML,"<head><title>Autoindex</title></head>\n");
	createAutoIndex(AutoIndexHTML,"<body>\n");
	createAutoIndex(AutoIndexHTML,"<h1>Index of " + directory + "</h1>\n");
	createAutoIndex(AutoIndexHTML,"<hr>\n");
	createAutoIndex(AutoIndexHTML,"<table>\n");
	createAutoIndex(AutoIndexHTML,"<tr><th>Name</th></tr>\n");
	//createAutoIndex(AutoIndexHTML,"<tr><th>Name</th><th>Last Modified</th><th>Size</th></tr>\n");

    // Add an entry for each file in the directory
	// Iterate over the files in the directory using the readdir function
    dirent* entry;
    vector<string> files;
    while ((entry = readdir(dir))) {
        if (entry->d_name[0] != '.') { // Exclude hidden files
            files.push_back(entry->d_name);
			createAutoIndex(AutoIndexHTML,"<tr><td><a href=\"" + string(entry->d_name) + "\">" + string(entry->d_name) + "</a></td></tr>\n");
			//createAutoIndex(AutoIndexHTML,"<tr><td><a href=\"" + string(entry->d_name) + "\">" + string(entry->d_name) + "</a></td><td>2018-01-01 00:00:00</td><td>1KB</td></tr>\n");
        }
    }

	// Close the directory using the closedir function
    closedir(dir);
		

    // Finish the HTML markup
	createAutoIndex(AutoIndexHTML,"</table>\n");
	createAutoIndex(AutoIndexHTML,"<hr>\n");
	createAutoIndex(AutoIndexHTML,"<address>Generated by C++</address>\n");
	createAutoIndex(AutoIndexHTML,"</body>\n");
	createAutoIndex(AutoIndexHTML,"</html>");

}



int	main(int argc, char **argv) {
	Utils::listen_signals();

	remove(logFile);
	
	TS = time(0);
	
	addLog(logFile,"Start main");

	createhmtl();

	std::cout << "Chronometer started." << std::endl;
	std::time_t start = std::time(0);
	while ( std::difftime(std::time(0), start) < 1) {
		//std::cout << "Elapsed time: " << std::difftime(std::time(0), start) << " seconds" << std::endl;
	}
	std::cout << "Chronometer finished." << std::endl;

	std::cout << "Elapsed time: " << std::difftime(std::time(0), TS) << " seconds" << std::endl;

	try {
		addLog(logFile,"Init HTML");
		addLog(logFile,"Initialize Server");
		web_serv.init(argc, argv);
		//std::cout << web_serv << std::endl;
		addLog(logFile,"Initialize Server Event Loop");
		web_serv.event_loop();
	} catch (const std::exception& e) {
		std::cout << e.what() << std::endl;
		return(1);
	}
	 

	return (0);

	}